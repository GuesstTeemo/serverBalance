package com.server.jt.service;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Timer;
import java.util.TimerTask;

import com.server.jt.util.ByteUtil;

import ench.ARPInterface;
import ench.JTM;
import ench.JTM.MsgBody;
import ench.JTM.MsgHead;

public class ServerSocketThread extends Observable implements Runnable {

	static Map<String, Integer> mapfuzai = new HashMap<String, Integer>();
	JsonS js = new JsonS();
	Socket Socket = null;
	private OutputStream out;
	private InputStream in;
	private Timer heartBeatTimer;
	private TimerTask heartBeatTask;
	public static String startTime;
	public static InetAddress Ip;
	private int port;
	int sno;

	public ServerSocketThread(Socket socket1) {
		System.out.println("线程启动...");
		this.Socket = socket1;
		Ip = socket1.getInetAddress();
		// 显示ip
		System.out.println("ServerSocketThread+连接地址ip：" + Ip);
		new Thread(this).start();
	}

	@Override
	public void run() {
		try {
			in = Socket.getInputStream();
			out = Socket.getOutputStream();
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式
			startTime = df.format(new Date());// new Date()为获取当前系统时间
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// sendHandshakeReq();// 发送握手请求
		startHeartBeatThread();// 启动心跳定时器
		while (true) {
			try {

				byte[] header = new byte[4];
				int headernext = 0;
				while (headernext < 4) {
					int len = in.read(header, headernext, 4 - headernext);
					headernext += len;
				}
				int contextnext = 0;
				int protlen = ByteUtil.byte2int(header);
				if (protlen != 0) {
					byte[] protobuf = new byte[protlen];
					while (contextnext < protlen) {
						int len = in.read(protobuf, contextnext, protlen
								- contextnext);
						contextnext += len;
					}
					doRead(protobuf);// 得到完整报文后进行解析

				} else {
					System.out.println("【serversocket】只有消息头的一个空包");
				}

			}

			catch (SocketTimeoutException e) {
				System.out.println("【serversocket】连接超时");
				closeSocketServer();// 关闭socket
				if (heartBeatTimer != null) {
					heartBeatTimer.cancel();// 关闭之前的定时器
				}
				doBusiness();// 通知观察者

			} catch (IOException e) {

				System.out.println("【serversocket】read出现错误");
				closeSocketServer();// 关闭socket
				if (heartBeatTimer != null) {
					heartBeatTimer.cancel();
				}
				doBusiness();
				break;
			}
		}
	}

	public void doBusiness() {
		// System.out.println("【serversocket】启用观察者");
		super.setChanged();
		notifyObservers("serversocket");

	}

	public void writeToSocket(byte[] b) throws IOException {
		if (out != null) {
			out.write(b);
			out.flush();
		}
	}

	public void sendHandshakeReq() {

		try {
			// ================ 用proto buffer 编写与核心服务的登录握手报文=================

			ARPInterface.ARPMessage.Builder arpmessageBuilder = ARPInterface.ARPMessage
					.newBuilder();
			ARPInterface.ARPMessage.Service.Builder serviceBuider3 = ARPInterface.ARPMessage.Service
					.newBuilder();
			ARPInterface.ARPMessage.LoginRsp.Builder loginrspBuilder = ARPInterface.ARPMessage.LoginRsp
					.newBuilder();

			serviceBuider3.setServiceNo(8);
			System.out.println("我有握手");

			loginrspBuilder.setServerNo(11);// 服务编号
			loginrspBuilder.addServices(serviceBuider3);

			arpmessageBuilder.setLoginRsp(loginrspBuilder);
			ARPInterface.ARPMessage arpmessage = arpmessageBuilder.build();

			byte[] b = arpmessage.toByteArray();
			byte[] header = ByteUtil.intTobyte(b.length);
			byte[] buf = ByteUtil.getMergeBytes(header, b);

			// if (buf != null) {
			this.writeToSocket(buf);
			// }

		} catch (IOException e) {

			System.out.println("【serversocket】握手write出现错误");
		}
	}

	public void startHeartBeatThread() {
		// 启动心跳线程
		heartBeatTimer = new Timer();
		heartBeatTask = new TimerTask() {

			@Override
			public void run() {

				try {
					// System.out.println("我有心跳！！！");
					// 心跳的 实际内容
					byte[] header2 = ByteUtil.intTobyte(0);
					// System.out.println("serversocket心跳=====" +
					// header2.length);
					writeToSocket(header2);

				} catch (IOException e) {

					System.out.println("【serversocket】心跳包write出现错误");
				}
			}
		};
		heartBeatTimer.schedule(heartBeatTask, 5000, 30000); // 启动5s后开始执行，间隔30s
	}

	public void closeSocketServer() {
		try {

			if (null != Socket && !Socket.isClosed()) {
				Socket.close();
				System.out.println("【serversocket】已经关闭");
			}
		} catch (IOException e) {

			System.out.println("【serversocket】关闭出现错误");
		}
	}

	public void doRead(byte[] protobuf) {
		try {

			ARPInterface.ARPMessage arpmessage = ARPInterface.ARPMessage
					.parseFrom(protobuf);
			ARPInterface.ARPMessage.Service.Builder serviceBuider = ARPInterface.ARPMessage.Service
					.newBuilder();
			ARPInterface.ARPMessage.Builder arpmessageBuilder = ARPInterface.ARPMessage
					.newBuilder();
			ARPInterface.ARPMessage.LoginRsp.Builder loginrsp = ARPInterface.ARPMessage.LoginRsp
					.newBuilder();

			if (arpmessage.hasLoginReq()) {

				System.out.println("请求握手的响应");
				ARPInterface.ARPMessage loginse1 = ARPInterface.ARPMessage
						.parseFrom(arpmessage.toByteArray());
				// System.out.println("loginse:"+loginse);
				sno = loginse1.getLoginReq().getServerNo();
				System.out.println("sno:" + sno);
				serviceBuider.setServiceNo(8);
				loginrsp.setServerNo(11);
				loginrsp.addServices(serviceBuider);
				arpmessageBuilder.setLoginRsp(loginrsp);
				ARPInterface.ARPMessage arp = arpmessageBuilder.build();

				byte[] b = arp.toByteArray();
				byte[] header = ByteUtil.intTobyte(b.length);
				byte[] buf = ByteUtil.getMergeBytes(header, b);

				this.writeToSocket(buf);

			} else {
				JTM.JTMessage jtmessage = JTM.JTMessage.parseFrom(arpmessage
						.getServiceRouteNty().getServiceData());
				// System.out.println("Receive:" + jtmessage);

				int EndFlag = jtmessage.getMsgHead().getEndFlag();
				// System.out.println("EndFlag----" + EndFlag);
				int RequestID = jtmessage.getMsgHead().getRequestID();
				// System.out.println("RequestID----" + RequestID);
				// IP
				String servaddr = jtmessage.getMsgBody().getLoadNty()
						.getServaddr();
				System.out.println("servaddr++++" + servaddr);
				// 负载值
				int load = jtmessage.getMsgBody().getLoadNty().getLoad();
				System.out.println("load++++" + load);
				// 实盘模拟盘flag
				int envflag = jtmessage.getMsgBody().getLoadNty().getEnvflag();
				// System.out.println("envflag----" + envflag);
				// 存入MAP
				Map<String, Integer> map = new HashMap<String, Integer>();

				// “IPV4,IPV6,PORT,服务器号”
				System.out.println("sno++++" + sno);
				if (servaddr != null && !servaddr.equals("")) {
					String addrno = servaddr + "," + sno;
					mapfuzai.put(addrno, load);
					map.put(addrno, load);
					// 分实盘模拟盘
					js.split(map);
				}
			}
			// }
		} catch (IOException e) {

			System.out.println("【serversocket】解析json包出现错误");
		}
	}

}
